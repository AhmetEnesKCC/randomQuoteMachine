{"version":3,"sources":["components/randomQuote.jsx","redux.js","App.js","serviceWorker.js","index.js"],"names":["id_text","id_author","id_quote_box","id_like_button","initialState","quote","author","random_number","random_color","liked_quotes","randomNumberAction","number","type","randomColorAction","c1","c2","c3","reducers","combineReducers","state","action","some","a","payload","filter","body","document","getElementsByTagName","RandomQuote","useSelector","randomNumber","randomColor","dispatch","useDispatch","Math","floor","random","quotes","length","style","backgroundColor","color","useEffect","getElementById","classList","add","quoteAction","authorAction","id","icon","faQuoteLeft","marginRight","onClick","e","likedQuotesAction","fontSize","faHeart","getRandomQuote","newNumber","opacity","setTimeout","faSyncAlt","href","replace","faTwitter","transition","console","log","App","Boolean","window","location","hostname","match","middleWare","thunk","store","createStore","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+kVAqBIA,EACAC,EACAC,EACAC,E,6DCfEC,G,MAAe,CACnBC,MAAO,GACPC,OAAQ,GACRC,cAAe,KACfC,aAAc,KACdC,aAAc,KAGHC,EAAqB,SAACC,GAAD,MAAa,CAC7CC,KAboB,gBAcpBD,WAaWE,EAAoB,SAACC,EAAIC,EAAIC,GAAT,MAAiB,CAChDJ,KA3BmB,eA4BnBE,KACAC,KACAC,OAyEWC,EAAWC,YAAgB,CACtCb,MA7D0B,WAAyC,IAAxCc,EAAuC,uDAA/Bf,EAAaC,MAAOe,EAAW,uCAClE,OAAQA,EAAOR,MACb,IAhDc,YAiDZ,OAAOQ,EAAOf,MAChB,QACE,OAAOc,IAyDXb,OArD2B,WAA0C,IAAzCa,EAAwC,uDAAhCf,EAAaE,OAAQc,EAAW,uCACpE,OAAQA,EAAOR,MACb,IAxDe,aAyDb,OAAOQ,EAAOd,OAChB,QACE,OAAOa,IAiDXZ,cA7CiC,WAG7B,IAFJY,EAEG,uDAFKf,EAAaG,cACrBa,EACG,uCACH,OAAQA,EAAOR,MACb,IAnEkB,gBAoEhB,OAAOQ,EAAOT,OAChB,QACE,OAAOQ,IAsCXX,aAlCgC,WAG5B,IAFJW,EAEG,uDAFKf,EAAaI,aACrBY,EACG,uCACH,OAAQA,EAAOR,MACb,IA9EiB,eA+Ef,MAAM,OAAN,OAAcQ,EAAON,GAArB,YAA2BM,EAAOL,GAAlC,aAAyCK,EAAOJ,GAAhD,MACF,QACE,OAAOG,IA2BXV,aAvB+B,WAG3B,IAFJU,EAEG,uDAFKf,EAAaK,aACrBW,EACG,uCACH,OAAQA,EAAOR,MACb,IAzFe,aA0Fb,OAAIO,EAAME,MAAK,SAACC,GAAD,OAAOA,EAAE,KAAOF,EAAOG,QAAQ,MACrCJ,EAED,GAAN,mBAAWA,GAAX,CAAkBC,EAAOG,UAE7B,IA9FiB,eA+Ff,OAAOJ,EAAMK,QAAO,SAACF,GAAD,OAAOA,EAAE,KAAOF,EAAOG,WAC7C,QACE,OAAOJ,M,sBDrFTM,EAAOC,SAASC,qBAAqB,QAAQ,GAOlC,SAASC,IACtB,IAAMvB,EAAQwB,aAAY,SAACV,GAAD,OAAWA,EAAMd,SACrCC,EAASuB,aAAY,SAACV,GAAD,OAAWA,EAAMb,UACtCwB,EAAeD,aAAY,SAACV,GAAD,OAAWA,EAAMZ,iBAC5CwB,EAAcF,aAAY,SAACV,GAAD,OAAWA,EAAMX,gBAC3CC,EAAeoB,aAAY,SAACV,GAAD,OAAWA,EAAMV,gBAC5CuB,EAAWC,cACJC,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,QAC/Cb,EAAKc,MAAMC,gBAAkBT,EAC7B,IAAIU,EAAQ,CACVP,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,WAGlBM,qBAAU,WACR1C,EAAU0B,SAASiB,eAAe,QAClC1C,EAAYyB,SAASiB,eAAe,UACpCzC,EAAewB,SAASiB,eAAe,cACvCxC,EAAiBuB,SAASiB,eAAe,gBAC1BC,UAAUC,IAAI,eAC7Bb,EAAStB,EAAmBwB,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,UAC9DN,EAASnB,EAAkB4B,EAAM,GAAIA,EAAM,GAAIA,EAAM,KACjDA,EAAM,IAAM,KACdvC,EAAaqC,MAAMC,gBAAkB,QACrCrC,EAAeoC,MAAME,MAAQ,WAE9B,IAEHT,EClCyB,SAAC3B,GAAD,MAAY,CACrCO,KApBgB,YAqBhBP,SDiCEyC,CACET,EAC0B,kBAAjBP,EACHA,EACAI,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,SACtC,KAGNN,ECtC0B,SAAC1B,GAAD,MAAa,CACvCM,KAxBiB,aAyBjBN,UDqCEyC,CACEV,EAC0B,kBAAjBP,EACHA,EACAI,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,SACtC,KAkCN,OACE,6BACE,yBAAKU,GAAG,aACN,yBAAKA,GAAG,OAAOT,MAAO,CAAEE,MAAOV,IAC7B,kBAAC,IAAD,CAAiBkB,KAAMC,IAAaX,MAAO,CAAEY,YAAa,MACzD9C,GAEH,yBAAK2C,GAAG,SAAST,MAAO,CAAEE,MAAOV,IAC9BzB,EAAQ,KAEX,yBAAK0C,GAAG,iBACN,4BACEA,GAAG,cACHI,QAAS,SAACC,GACJ5C,EAAaY,MAAK,SAACC,GAAD,OAAOA,EAAE,KAAOQ,KACpCE,EC5EgC,CAC9CpB,KArCmB,eAsCnBW,QD0E0CO,IAE5BE,ECnFiB,SAACT,GAAD,MAAc,CAC7CX,KAjCiB,aAkCjBW,WDkFgB+B,CAAkB,CAChBjB,EAAOP,GAAc,GACrBO,EAAOP,GAAc,GACrBA,OAMR,kBAAC,IAAD,CACEkB,GAAG,QACHT,MAAO,CAAEgB,SAAU,MACnBN,KAAMO,IACNf,MA7DNhC,EAAaY,MAAK,SAACC,GAAD,OAAOA,EAAE,KAAOQ,KAC7B,MAEA,UA6DH,4BAAQkB,GAAG,YAAYI,QAAS,kBA1DjB,SAAjBK,IACJ,IAAIC,EAAYxB,KAAKC,MAAMD,KAAKE,SAAWC,EAAOC,QAClDN,EAASnB,EAAkB4B,EAAM,GAAIA,EAAM,GAAIA,EAAM,KACjDA,EAAM,IAAM,IACdvC,EAAaqC,MAAMC,gBAAkB,QACrCrC,EAAeoC,MAAME,MAAQ,UAE7BvC,EAAaqC,MAAMC,gBAAkB,QACrCrC,EAAeoC,MAAME,MAAQ,SAE/BzC,EAAQuC,MAAMoB,QAAU,EACxB1D,EAAUsC,MAAMoB,QAAU,EAC1BC,YAAW,WACT5D,EAAQuC,MAAMoB,QAAU,EACxB1D,EAAUsC,MAAMoB,QAAU,IACzB,KACCD,IAAc5B,EAChB8B,YAAW,WACT5B,EAAStB,EAAmBgD,MAC3B,KAEHD,IAqC0CA,KACpC,kBAAC,IAAD,CACET,GAAG,iBACHC,KAAMY,IACNpB,MAAuB,OAAhBV,EAAuB,QAAUA,KAG5C,yBAAKiB,GAAG,kBACN,uBACEc,KAAI,iDAA4CzD,GAA5C,OACF,aAAeC,EAAOyD,QAAQ,IAAK,KAErCf,GAAG,eAEH,kBAAC,IAAD,CACEC,KAAMe,IACNzB,MAAO,CAAEgB,SAAU,GAAId,MAAOV,EAAakC,WAAY,YAMjE,yBAAKjB,GAAG,kBAvIdkB,QAAQC,IAAInE,G,MEvBG,SAASoE,IACtB,OACE,6BACE,kBAACxC,EAAD,OCMcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICVAC,EAAa,C,MAACC,GAEdC,EAAQC,YACZ5D,EACA6D,YACEC,IAAe,WAAf,EAAmBL,GAClBJ,OAAOU,8BACNV,OAAOU,gCACP,SAAUC,GACR,OAAOA,KAKfC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAEFlD,SAASiB,eAAe,SDyGpB,kBAAmByC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.33765474.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport quotes from \"../quotes.json\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  authorAction,\r\n  quoteAction,\r\n  randomNumberAction,\r\n  randomColorAction,\r\n  liked_quotes,\r\n  likeQuotesReducer,\r\n  likedQuotesAction,\r\n  unlikeQuotesAction,\r\n} from \"../redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faHeart,\r\n  faSyncAlt,\r\n  faQuoteLeft,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nvar body = document.getElementsByTagName(\"body\")[0];\r\nvar id_text;\r\nvar id_author;\r\nvar id_quote_box;\r\nvar id_like_button;\r\nvar clickCount = 0;\r\nconsole.log(id_text);\r\nexport default function RandomQuote() {\r\n  const quote = useSelector((state) => state.quote);\r\n  const author = useSelector((state) => state.author);\r\n  const randomNumber = useSelector((state) => state.random_number);\r\n  const randomColor = useSelector((state) => state.random_color);\r\n  const liked_quotes = useSelector((state) => state.liked_quotes);\r\n  const dispatch = useDispatch();\r\n  var number = Math.floor(Math.random() * quotes.length);\r\n  body.style.backgroundColor = randomColor;\r\n  var color = [\r\n    Math.floor(Math.random() * 360),\r\n    Math.floor(Math.random() * 100),\r\n    Math.floor(Math.random() * 100),\r\n  ];\r\n\r\n  useEffect(() => {\r\n    id_text = document.getElementById(\"text\");\r\n    id_author = document.getElementById(\"author\");\r\n    id_quote_box = document.getElementById(\"quote-box\");\r\n    id_like_button = document.getElementById(\"like-button\");\r\n    id_like_button.classList.add(\"empty-class\");\r\n    dispatch(randomNumberAction(Math.floor(Math.random() * quotes.length)));\r\n    dispatch(randomColorAction(color[0], color[1], color[2]));\r\n    if (color[2] >= 50) {\r\n      id_quote_box.style.backgroundColor = \"black\";\r\n      id_like_button.style.color = \"white\";\r\n    }\r\n  }, []);\r\n\r\n  dispatch(\r\n    quoteAction(\r\n      quotes[\r\n        typeof randomNumber === \"number\"\r\n          ? randomNumber\r\n          : Math.floor(Math.random() * quotes.length)\r\n      ][0]\r\n    )\r\n  );\r\n  dispatch(\r\n    authorAction(\r\n      quotes[\r\n        typeof randomNumber === \"number\"\r\n          ? randomNumber\r\n          : Math.floor(Math.random() * quotes.length)\r\n      ][1]\r\n    )\r\n  );\r\n  function isLiked() {\r\n    if (liked_quotes.some((a) => a[2] === randomNumber)) {\r\n      return \"red\";\r\n    } else {\r\n      return \"grey\";\r\n    }\r\n  }\r\n  const getRandomQuote = () => {\r\n    var newNumber = Math.floor(Math.random() * quotes.length);\r\n    dispatch(randomColorAction(color[0], color[1], color[2]));\r\n    if (color[2] >= 50) {\r\n      id_quote_box.style.backgroundColor = \"black\";\r\n      id_like_button.style.color = \"white\";\r\n    } else {\r\n      id_quote_box.style.backgroundColor = \"white\";\r\n      id_like_button.style.color = \"black\";\r\n    }\r\n    id_text.style.opacity = 0;\r\n    id_author.style.opacity = 0;\r\n    setTimeout(() => {\r\n      id_text.style.opacity = 1;\r\n      id_author.style.opacity = 1;\r\n    }, 500);\r\n    if (newNumber !== randomNumber) {\r\n      setTimeout(() => {\r\n        dispatch(randomNumberAction(newNumber));\r\n      }, 500);\r\n    } else {\r\n      getRandomQuote();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div id=\"quote-box\">\r\n        <div id=\"text\" style={{ color: randomColor }}>\r\n          <FontAwesomeIcon icon={faQuoteLeft} style={{ marginRight: 10 }} />\r\n          {quote}\r\n        </div>\r\n        <div id=\"author\" style={{ color: randomColor }}>\r\n          {author}{\" \"}\r\n        </div>\r\n        <div id=\"quote-buttons\">\r\n          <button\r\n            id=\"like-button\"\r\n            onClick={(e) => {\r\n              if (liked_quotes.some((a) => a[2] === randomNumber)) {\r\n                dispatch(unlikeQuotesAction(randomNumber));\r\n              } else {\r\n                dispatch(\r\n                  likedQuotesAction([\r\n                    quotes[randomNumber][0],\r\n                    quotes[randomNumber][1],\r\n                    randomNumber,\r\n                  ])\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            <FontAwesomeIcon\r\n              id=\"liked\"\r\n              style={{ fontSize: \"30\" }}\r\n              icon={faHeart}\r\n              color={isLiked()}\r\n            />\r\n          </button>\r\n          <button id=\"new-quote\" onClick={() => getRandomQuote()}>\r\n            <FontAwesomeIcon\r\n              id=\"new-quote-icon\"\r\n              icon={faSyncAlt}\r\n              color={randomColor === null ? \"black\" : randomColor}\r\n            />\r\n          </button>\r\n          <div id=\"social-buttons\">\r\n            <a\r\n              href={`https://twitter.com/intent/tweet/?text=${quote}${\r\n                \"&hashtags=\" + author.replace(\" \", \"\")\r\n              }`}\r\n              id=\"tweet-quote\"\r\n            >\r\n              <FontAwesomeIcon\r\n                icon={faTwitter}\r\n                style={{ fontSize: 40, color: randomColor, transition: \"1s\" }}\r\n              />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div id=\"liked-quotes\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nconst GET_QUOTE = \"GET_QUOTE\";\r\nconst GET_AUTHOR = \"GET_AUTHOR\";\r\nconst RANDOM_NUMBER = \"RANDOM_NUMBER\";\r\nconst RANDOM_COLOR = \"RANDOM_COLOR\";\r\nconst LIKE_QUOTE = \"LIKE_QUOTE\";\r\nconst UNLIKE_QUOTE = \"UNLIKE_QUOTE\";\r\nconst initialState = {\r\n  quote: \"\",\r\n  author: \"\",\r\n  random_number: null,\r\n  random_color: null,\r\n  liked_quotes: [],\r\n};\r\n\r\nexport const randomNumberAction = (number) => ({\r\n  type: RANDOM_NUMBER,\r\n  number,\r\n});\r\n\r\nexport const quoteAction = (quote) => ({\r\n  type: GET_QUOTE,\r\n  quote,\r\n});\r\n\r\nexport const authorAction = (author) => ({\r\n  type: GET_AUTHOR,\r\n  author,\r\n});\r\n\r\nexport const randomColorAction = (c1, c2, c3) => ({\r\n  type: RANDOM_COLOR,\r\n  c1,\r\n  c2,\r\n  c3,\r\n});\r\n\r\nexport const likedQuotesAction = (payload) => ({\r\n  type: LIKE_QUOTE,\r\n  payload,\r\n});\r\n\r\nexport const unlikeQuotesAction = (payload) => ({\r\n  type: UNLIKE_QUOTE,\r\n  payload,\r\n});\r\n\r\nexport const quoteReducer = (state = initialState.quote, action) => {\r\n  switch (action.type) {\r\n    case GET_QUOTE:\r\n      return action.quote;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const authorReducer = (state = initialState.author, action) => {\r\n  switch (action.type) {\r\n    case GET_AUTHOR:\r\n      return action.author;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const randomNumberReducer = (\r\n  state = initialState.random_number,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case RANDOM_NUMBER:\r\n      return action.number;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const randomColorReducer = (\r\n  state = initialState.random_color,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case RANDOM_COLOR:\r\n      return `hsl(${action.c1},${action.c2}%,${action.c3}%)`;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const likeQuotesReducer = (\r\n  state = initialState.liked_quotes,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case LIKE_QUOTE:\r\n      if (state.some((a) => a[2] === action.payload[2])) {\r\n        return state;\r\n      } else {\r\n        return [...state, action.payload];\r\n      }\r\n    case UNLIKE_QUOTE:\r\n      return state.filter((a) => a[2] !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const reducers = combineReducers({\r\n  quote: quoteReducer,\r\n  author: authorReducer,\r\n  random_number: randomNumberReducer,\r\n  random_color: randomColorReducer,\r\n  liked_quotes: likeQuotesReducer,\r\n});\r\n","import React from \"react\";\nimport RandomQuote from \"./components/randomQuote.jsx\";\nimport \"./App.css\";\nexport default function App() {\n  return (\n    <div>\n      <RandomQuote />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { reducers } from \"./redux\";\nimport thunk from \"redux-thunk\";\nconst middleWare = [thunk];\n\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(...middleWare),\n    (window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__()) ||\n      function (f) {\n        return f;\n      }\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}